package com.formacionbdi.springboot.app.adn.controllers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.formacionbdi.springboot.app.adn.service.AdnService;
import com.formacionbdi.springboot.app.commons.models.dto.AdnDTO;
import com.formacionbdi.springboot.app.commons.models.dto.StatsDTO;
import com.formacionbdi.springboot.app.commons.models.entity.RegistroAdn;

@RestController
public class AdnController {

	@Autowired
	private Environment env;
	
	@Value("${server.port}")
	private Integer port;
	
	@Autowired
	private AdnService adnService;
	
	@GetMapping("/listar")
	public List<RegistroAdn> listar(){
		return adnService.findAll().stream().map(producto -> {
			//producto.setPort(Integer.parseInt(env.getProperty("local.server.port")));
			//producto.setPort(port);
			return producto;
		}).collect(Collectors.toList());
	}
	
	@GetMapping("/ver/{id}")
	public RegistroAdn detalle(@PathVariable Long id) throws Exception{
		RegistroAdn adnFound = adnService.findById(id);
		//producto.setPort(Integer.parseInt(env.getProperty("local.server.port")));
		//producto.setPort(port);
		
//		boolean ok = false;
//		if(ok == false)
//			throw new Exception("No se pudo cargar el producto");
		
		
//		try {
//		Thread.sleep(6000L);
//		} catch(InterruptedException e) {
//			e.printStackTrace();
//		}
		
		return adnFound;
		
	}
	
	@PostMapping("/crear")
	@ResponseStatus(HttpStatus.CREATED)
	public RegistroAdn crear(@RequestBody RegistroAdn adnIn) {
		return adnService.save(adnIn);		
		
	}
	
	@PutMapping("/editar/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public RegistroAdn editar(@RequestBody RegistroAdn adnIn, @PathVariable Long id ) {
		RegistroAdn adnDb = adnService.findById(id);
		adnDb.setAdn(adnIn.getAdn());
		adnDb.setType(adnIn.getType());
		return adnService.save(adnDb);	
	}
	
	
	@DeleteMapping("/eliminar/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void eliminar( @PathVariable Long id) {
		adnService.deleteById(id);
		
	}
	
	@PostMapping("/mutant")
	@ResponseStatus(HttpStatus.FORBIDDEN)
	public ResponseEntity<?> isMutant(@RequestBody AdnDTO adnIn) {
		Map<String, String> json = new HashMap<>();
		String result = adnService.isMutante(adnIn.getDna());
		if(!result.isBlank()) {
			json.put("PROCESS",result);	
			return new ResponseEntity<Map<String, String>>(json, HttpStatus.OK);
		}
		else {
			json.put("ERROR",result);
			return new ResponseEntity<Map<String, String>>(json, HttpStatus.FORBIDDEN);
		}
		
	}
	
	@PostMapping("/stats")
	@ResponseStatus(HttpStatus.OK)
	public StatsDTO stats(@RequestBody AdnDTO adnIn) {
		StatsDTO statsDTO = new StatsDTO();
		return adnService.stats();
	}
